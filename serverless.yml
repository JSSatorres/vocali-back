service: vocali

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-west-1
  stage: ${self:custom.stage}
  logRetentionInDays: 14
  logs:
    httpApi: true


  httpApi:
    cors:
      allowCredentials: false
      allowedOrigins:
        - "*"
      allowedHeaders:
        - Content-Type
        - X-Amz-Date
        - Authorization
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      maxAge: 86400
    # logs:
    #   # Nivel de log, puede ser INFO o DEBUG
    #   # Para HTTP API, 'level' controla principalmente si se envían los logs.
    #   # La verbosidad de lo que se loguea se controla con 'format'.
    #   level: INFO
    #   # El 'format' es crucial para capturar detalles del error de integración.
    #   # Aquí incluimos $context.integrationErrorMessage que te dirá por qué la Lambda no se invocó.
    #   format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","path":"$context.path","status":"$context.status","error":"$context.integrationErrorMessage","integrationStatus":"$context.integrationStatus","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
    authorizers:
      jwtAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${env:COGNITO_REGION}.amazonaws.com/${env:COGNITO_USER_POOL_ID}
        audience:
        - ${env:COGNITO_CLIENT_ID}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.userTableName}
        - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.transcriptionTableName}
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
        - s3:ListBucket
      Resource:
        - arn:aws:s3:::${self:custom.bucketName}
        - arn:aws:s3:::${self:custom.bucketName}/*


plugins:
  - serverless-offline

custom:
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}
  accountId: ${aws:accountId}
  bucketName: vocali-transcriptions-${self:custom.stage}-${self:custom.accountId}
  userTableName: vocali-users-${self:custom.stage}
  transcriptionTableName: vocali-transcriptions-${self:custom.stage}


build:
  esbuild:
    bundle: true
    minify: true
    target: node20
    exclude:
      - aws-sdk
    external:
      - '@aws-sdk/*'
    inject:
      - './node_modules/reflect-metadata/Reflect.js'

functions:
  postTranscription:
    handler: src/app/lambdaHandler/Transcription/transcriptionPostHandler.transcriptionPostHandler
    timeout: 300
    memorySize: 128
    environment:
      TRANSCRIPTION_TABLE_NAME: ${self:custom.transcriptionTableName}
      S3_BUCKET_NAME: ${self:custom.bucketName}
      SPEECHMATICS_API_KEY: ${env:SPEECHMATICS_API_KEY}
    events:
      - httpApi:
          path: /transcriptions
          method: post
          authorizer:
            name: jwtAuthorizer

  getTranscriptions:
    handler: src/app/lambdaHandler/Transcription/transcriptionGetAllHandler.transcriptionGetAllHandler
    environment:
      TRANSCRIPTION_TABLE_NAME: ${self:custom.transcriptionTableName}
      SPEECHMATICS_API_KEY: ${env:SPEECHMATICS_API_KEY}
    events:
      - httpApi:
          path: /transcriptions
          method: get

  getTranscriptionById:
    handler: src/app/lambdaHandler/Transcription/transcriptionGetByIdHandler.transcriptionGetByIdHandler
    environment:
      TRANSCRIPTION_TABLE_NAME: ${self:custom.transcriptionTableName}
      SPEECHMATICS_API_KEY: ${env:SPEECHMATICS_API_KEY}
    events:
      - httpApi:
          path: /transcriptions/{id}
          method: get
resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    TranscriptionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.transcriptionTableName}
        AttributeDefinitions:
          - AttributeName: transcriptionId
            AttributeType: S
        KeySchema:
          - AttributeName: transcriptionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    TranscriptionsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedHeaders:
                - "*"
              MaxAge: 3000
